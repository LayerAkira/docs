openapi: 3.0.2
info:
  title: Layer Akira API
  description: API documentation for Layer Akira
  version: 1.0.0

servers:
  - url: https://api.layerakira.xyz

paths:
  /sign/request_sign_data:
    get:
      summary: Get Sign Data
      description: Retrieves data that the client needs to sign via the private key of the signer to show that they are the real owner of the account.
      parameters:
        - in: query
          name: user
          required: true
          schema:
            type: string
            example: "0x03e56dd52f96df3bc130f7a0b241dfed26b4a280d28a199e1e857f6d8acbb666"
          description: The public key responsible for signing actions on behalf of the account.
        - in: query
          name: account
          required: true
          schema:
            type: string
            example: "0x033e29bc9B537BAe4e370559331E2bf35b434b566f41a64601b37f410f46a580"
          description: The trading account.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultSignData'
              examples:
                SignDataIssued:
                  value:
                    result: "challenge sign data"
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              examples:
                WrongUser:
                  value:
                    code: 400
                    error: "Wrong user"
                WrongAccount:
                  value:
                    code: 400
                    error: "Wrong account"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              examples:
                Unauthorized:
                  value:
                    code: 401
                    error: "User account not whitelisted"
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              examples:
                RateLimitExceeded:
                  value:
                    code: 429
                    error: "Rate limit exceeded. Suggested sleep time: 1000ms"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              examples:
                ServerError:
                  value:
                    code: 500
                    error: "Internal server error"

  /sign/auth:
    post:
      summary: Issue JWT
      description: |
        Issues jwt token to be able to interact with rest exchange endpoints.
        The following typed message should we be signed. 
        Exchange expects either onchain signature or signature by the signer which binded to trader in layerakira smart contract.
        ```json
        {
          "domain": {
            "name": "LayerAkira Exchange",
            "version": "0.0.1",
            "chainId": "<MAINNET|SEPOLIA>"
          },
          "types": {
            "StarkNetDomain": [
              {"name": "name", "type": "felt"},
              {"name": "version", "type": "felt"},
              {"name": "chainId", "type": "felt"}
            ],
            "Message": [
              {"name": "welcome", "type": "string"},
              {"name": "to", "type": "string"},
              {"name": "exchange", "type": "string"}
            ]
          },
          "primaryType": "Message",
          "message": {
            "welcome": "Sign in to LayerAkira",
            "to": "\tChallenge:",
            "exchange": "place response challenge from /sign/request_sign_data"
          }
        }
        ```

      #      description: User would need to sign challenge received via request_sign_data that would be inserted into typed message. Refer to documentation chapter about auth.

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                msg:
                  type: string
                  description: The SignData from the getSignData endpoint.
                  example: "Some sign data"
                signature:
                  items:
                    type: string
                  description: The stringified signature of the typed message wrt to snip revision 0.
                  example: [ '0x1234abcd','0x1234...', '0x123..' ]
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultAuth'
              examples:
                JwtTokenIssued:
                  value:
                    result: "JWT token"
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              examples:
                InvalidInput:
                  value:
                    code: 400
                    error: "Invalid msg or signature parameter"
                MessageExpired:
                  value:
                    code: 400
                    error: "Message expired"
                IssueWithChain:
                  value:
                    code: 400
                    error: "Invalid onchain signature for 0x..."
                InvalidSignature:
                  value:
                    code: 400
                    error: "Invalid signature"
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              examples:
                RateLimitExceeded:
                  value:
                    code: 429
                    error: "Rate limit exceeded. Suggested sleep time: 1000ms"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              examples:
                ServerError:
                  value:
                    code: 500
                    error: "Internal server error"
                IssueWithChain:
                  value:
                    code: 500
                    error: "Issue with chain"
                FailedToParse:
                  value:
                    code: 500
                    error: "Failed to parse request"

  /gas/price:
    get:
      summary: Query current gas price
      description: |
        The takers would pay for gas per swap that happens with their order, 
        so trader need to specify max gas they are willing to spend per trade.
        Usually user can use 25-50 percent premium over returned value to avoid frequently query this value from exchange.
        The real gas price at time of chain settlement would reflect gas price of chain
      security:
        - AuthToken: [ ]
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultQueryGas'
              example:
                value:
                  result: "1234456788907878798"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                value:
                  code: 401
                  error: "Auth header required"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                value:
                  code: 500
                  error: "Internal server error"

  /book/bbo:
    get:
      summary: Get best bid and best offer for particular trading pair
      description: Retrieves best bid and best offer for particular trading pair
      security:
        - AuthToken: [ ]

      parameters:
        - in: query
          name: base
          required: true
          schema:
            type: string
            example: "ETH"
          description: Base symbol of trading pair
        - in: query
          name: quote
          required: true
          schema:
            type: string
            example: "USDC"
          description: Quote symbol of trading pair
        - in: query
          name: to_ecosystem_book
          required: true
          schema:
            type: integer
            example: 0 or 1
          description: Is book router or ecosystem
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BBOResponse'
              examples:
                BothDefined:
                  value:
                    result:
                      to_ecosystem_book: false
                      bid:
                        price: "3170.6313"
                        volume: "0.4380538"
                        orders: 1
                      ask:
                        price: "3170.6538"
                        volume: "3170.6538"
                        orders: 1
                      pair: "AETH-AUSDC"
                OneDefined:
                  value:
                    result:
                      to_ecosystem_book: false
                      bid: { }
                      ask:
                        price: "3170.6538"
                        volume: "3170.6538"
                        orders: 1
                      pair: "AETH-AUSDC"
                EmptyBook:
                  value:
                    result:
                      to_ecosystem_book: false
                      bid: { }
                      ask: { }
                      pair: "AETH-AUSDC"
        '404':
          description: No book for specified trading pair
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BBOResponse'
              example:
                result:
                  to_ecosystem_book: false
                  bid: { }
                  ask: { }
                  pair: "AETH-AETH"
        '422':
          description: Wrong parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                value:
                  code: 422
                  error: "Wrong parameters"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              examples:
                Unauthorized:
                  value:
                    code: 401
                    error: "Auth header required"
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              examples:
                RateLimitExceeded:
                  value:
                    code: 429
                    error: "Rate limit exceeded. Suggested sleep time: 1000ms"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              examples:
                ServerError:
                  value:
                    code: 500
                    error: "Internal server error"

  /book/snapshot:
    get:
      summary: Get book snapshot
      description: |
        Retrieves the book snapshot for particular trading pair and specified depth.
        Client have 2 option to maintain book:
          - periodic poll
          - query snapshot, subscribe over websocket, apply updated incrementally. Msg_id is incremental 
        
        bids array already sorted from best bid to lowest bid
        asks array already sorted from best offer to highest ask
      security:
        - AuthToken: [ ]

      parameters:
        - in: query
          name: base
          required: true
          schema:
            type: string
            example: "ETH"
          description: Base symbol of trading pair
        - in: query
          name: quote
          required: true
          schema:
            type: string
            example: "USDC"
          description: Quote symbol of trading pair
        - in: query
          name: to_ecosystem_book
          required: true
          schema:
            type: integer
            example: 0 or 1
          description: Is book router or ecosystem
        - in: query
          name: levels
          required: false
          schema:
            type: integer
            example: 0 or 1
          description: How many levels of book should be retrieved, -1 refers to all
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotResponse'
              example:
                result:
                  to_ecosystem_book: false
                  levels:
                    bids:
                      [ [ "3170.6313", "0.4380538", 1 ], [ "3170.3141", "0.5518194", 1 ], [ "3169.7316", "0.9523885", 1 ], [ "3169.0528", "0.5152233", 1 ], [ "3168.7976", "0.585468", 1 ], [ "3168.411", "0.8911725", 1 ], [ "3168.3633", "0.6783952", 1 ] ]
                    asks:
                      [ [ "3170.6538", "0.7230962", 1 ], [ "3170.7946", "0.7023717", 1 ], [ "3172.329", "0.764084", 1 ], [ "3172.7461", "0.5906632", 1 ], [ "3172.9463", "0.3627099", 1 ], [ "3173.6037", "0.8015292", 1 ], [ "3173.8306", "0.956762", 1 ], [ "3174.0809", "0.7838471", 1 ], [ "3174.8152", "0.468063", 1 ] ]
                    msg_id: "250"
                  pair: "AETH-AUSDC"

        '404':
          description: No book for specified trading pair
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BBOResponse'
              example:
                result:
                  to_ecosystem_book: false
                  levels:
                    asks: [ ]
                    bids: [ ]
                    msg_id: "0"
                  pair: "AETH-AETH"
        '422':
          description: Wrong parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                value:
                  code: 422
                  error: "Wrong parameters"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              examples:
                Unauthorized:
                  value:
                    code: 401
                    error: "Auth header required"
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              examples:
                RateLimitExceeded:
                  value:
                    code: 429
                    error: "Rate limit exceeded. Suggested sleep time: 1000ms"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              examples:
                ServerError:
                  value:
                    code: 500
                    error: "Internal server error"

components:
  securitySchemes:
    AuthToken:
      type: apiKey
      in: header
      name: Authorization  # name of the header, query parameter or cookie
  schemas:
    Result:
      type: object
      properties:
        result:
          oneOf:
            - type: string
            - type: object
            - type: array
              items:
                type: object
          required: false
        code:
          type: integer
          required: false
        error:
          type: string
          required: false
    ResultSignData:
      type: object
      properties:
        result:
          type: string
          required: true
          example: "sign data challenge"
    ResultAuth:
      type: object
      properties:
        result:
          type: string
          required: true
          example: "<jwt token>"
    ResultQueryGas:
      type: object
      properties:
        result:
          type: string
          required: true
          example: "some integer value"
    TableLevel:
      type: object
      properties:
        price:
          type: string
          example: "3170.6313"
          description: price in quote asset
        volume:
          type: string
          example: "0.4380538"
          description: qty in base asset
        orders:
          type: integer
          example: 1
          description: amount of orders on that level
    SnapshotLevel:
      type: array
      example: [ "2800", "12.25", 1 ]
      description: array of 3 element represent level <price, new volume at that level, new order at that level >
    SnapshotResponse:
      type: object
      properties:
        result:
          type: object
          properties:
            to_ecosystem_book:
              type: boolean
              example: false
            levels:
              type: object
              properties:
                bids:
                  oneOf:
                    - $ref: '#/components/schemas/SnapshotLevel'
                    - type: array
                      description: Empty side
                      example: [ ]
                  required: true
                  example: [ [ "3170.6313", "0.4380538", 1 ], [ "3170.3141", "0.5518194", 1 ] ]
                asks:
                  oneOf:
                    - $ref: '#/components/schemas/SnapshotLevel'
                    - type: array
                      description: Empty side
                  example: [ [ "3170.6538", "0.7230962", 1 ], [ "3170.7946", "0.7023717", 1 ] ]
                  required: true
                msg_id:
                  required: true
                  type: string
                  description: Book id, can be used to correctly apply book snapshots over websockets
                  example: "2555777"
            pair:
              type: string
              example: "AETH-AUSDC"


    BBOResponse:
      type: object
      properties:
        result:
          type: object
          properties:
            to_ecosystem_book:
              type: boolean
              example: false
            bid:
              oneOf:
                - $ref: '#/components/schemas/TableLevel'
                - type: object
                  description: Empty side
                  example: { }
            ask:
              $ref: '#/components/schemas/TableLevel'
            pair:
              type: string
              example: "AETH-AUSDC"
  examples:
    SignDataIssued:
      value:
        result: "Sign data issued successfully."
    InvalidInput:
      value:
        code: 400
        error: "Invalid user or account parameter"
    Unauthorized:
      value:
        code: 401
        error: "Unauthorized access"
    RateLimitExceeded:
      value:
        code: 429
        error: "Rate limit exceeded. Suggested sleep time: 1000ms"
    WrongUser:
      value:
        code: 500
        error: "Wrong user"
    WrongAccount:
      value:
        code: 500
        error: "Wrong account"
    ServerError:
      value:
        code: 500
        error: "Internal server error"
    JwtTokenIssued:
      value:
        result: "JWT token issued successfully."
#security:
#  - AuthToken: []
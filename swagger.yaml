openapi: 3.0.2
info:
  title: Layer Akira API
  description: API documentation for Layer Akira
  version: 1.0.0

servers:
  - url: https://api.layerakira.xyz

paths:
  /sign/request_sign_data:
    get:
      summary: Get Sign Data
      description: Retrieves data that the client needs to sign via the private key of the signer to show that they are the real owner of the account.
      parameters:
        - in: query
          name: user
          required: true
          schema:
            type: string
            example: "0x03e56dd52f96df3bc130f7a0b241dfed26b4a280d28a199e1e857f6d8acbb666"
          description: The public key responsible for signing actions on behalf of the account.
        - in: query
          name: account
          required: true
          schema:
            type: string
            example: "0x033e29bc9B537BAe4e370559331E2bf35b434b566f41a64601b37f410f46a580"
          description: The trading account.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultSignData'
              examples:
                SignDataIssued:
                  value:
                    result: "challenge sign data"
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              examples:
                WrongUser:
                  value:
                    code: 400
                    error: "Wrong user"
                WrongAccount:
                  value:
                    code: 400
                    error: "Wrong account"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              examples:
                Unauthorized:
                  value:
                    code: 401
                    error: "User account not whitelisted"
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              examples:
                RateLimitExceeded:
                  value:
                    code: 429
                    error: "Rate limit exceeded. Suggested sleep time: 1000ms"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              examples:
                ServerError:
                  value:
                    code: 500
                    error: "Internal server error"

  /sign/auth:
    post:
      summary: Issue JWT
      description: |
        Issues jwt token to be able to interact with rest exchange endpoints.
        The following typed message should we be signed. 
        Exchange expects either onchain signature or signature by the signer which binded to trader in layerakira smart contract.
        ```json
        {
          "domain": {
            "name": "LayerAkira Exchange",
            "version": "0.0.1",
            "chainId": "<MAINNET|SEPOLIA>"
          },
          "types": {
            "StarkNetDomain": [
              {"name": "name", "type": "felt"},
              {"name": "version", "type": "felt"},
              {"name": "chainId", "type": "felt"}
            ],
            "Message": [
              {"name": "welcome", "type": "string"},
              {"name": "to", "type": "string"},
              {"name": "exchange", "type": "string"}
            ]
          },
          "primaryType": "Message",
          "message": {
            "welcome": "Sign in to LayerAkira",
            "to": "\tChallenge:",
            "exchange": "place response challenge from /sign/request_sign_data"
          }
        }
        ```

      #      description: User would need to sign challenge received via request_sign_data that would be inserted into typed message. Refer to documentation chapter about auth.

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                msg:
                  type: string
                  description: The SignData from the getSignData endpoint.
                  example: "Some sign data"
                signature:
                  items:
                    type: string
                  description: The stringified signature of the typed message wrt to snip revision 0.
                  example: [ '0x1234abcd','0x1234...', '0x123..' ]
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultAuth'
              examples:
                JwtTokenIssued:
                  value:
                    result: "JWT token"
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              examples:
                InvalidInput:
                  value:
                    code: 400
                    error: "Invalid msg or signature parameter"
                MessageExpired:
                  value:
                    code: 400
                    error: "Message expired"
                IssueWithChain:
                  value:
                    code: 400
                    error: "Invalid onchain signature for 0x..."
                InvalidSignature:
                  value:
                    code: 400
                    error: "Invalid signature"
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              examples:
                RateLimitExceeded:
                  value:
                    code: 429
                    error: "Rate limit exceeded. Suggested sleep time: 1000ms"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              examples:
                ServerError:
                  value:
                    code: 500
                    error: "Internal server error"
                IssueWithChain:
                  value:
                    code: 500
                    error: "Issue with chain"
                FailedToParse:
                  value:
                    code: 500
                    error: "Failed to parse request"

  /gas/price:
    get:
      summary: Query current gas price
      description: |
        The takers would pay for gas per swap that happens with their order, 
        so trader need to specify max gas they are willing to spend per trade.
        Usually user can use 25-50 percent premium over returned value to avoid frequently query this value from exchange.
        The real gas price at time of chain settlement would reflect gas price of chain
      security:
        - AuthToken: [ ]
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultQueryGas'
              example:
                value:
                  result: "1234456788907878798"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                value:
                  code: 401
                  error: "Auth header required"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                value:
                  code: 500
                  error: "Internal server error"

  /book/bbo:
    get:
      summary: Get best bid and best offer for particular trading pair
      description: Retrieves best bid and best offer for particular trading pair
      security:
        - AuthToken: [ ]

      parameters:
        - in: query
          name: base
          required: true
          schema:
            type: string
            example: "ETH"
          description: Base symbol of trading pair
        - in: query
          name: quote
          required: true
          schema:
            type: string
            example: "USDC"
          description: Quote symbol of trading pair
        - in: query
          name: to_ecosystem_book
          required: true
          schema:
            type: integer
            example: 0 or 1
          description: Is book router or ecosystem
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BBOResponse'
              examples:
                BothDefined:
                  value:
                    result:
                      to_ecosystem_book: false
                      bid:
                        price: "3170.6313"
                        volume: "0.4380538"
                        orders: 1
                      ask:
                        price: "3170.6538"
                        volume: "3170.6538"
                        orders: 1
                      pair: "AETH-AUSDC"
                OneDefined:
                  value:
                    result:
                      to_ecosystem_book: false
                      bid: { }
                      ask:
                        price: "3170.6538"
                        volume: "3170.6538"
                        orders: 1
                      pair: "AETH-AUSDC"
                EmptyBook:
                  value:
                    result:
                      to_ecosystem_book: false
                      bid: { }
                      ask: { }
                      pair: "AETH-AUSDC"
        '404':
          description: No book for specified trading pair
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BBOResponse'
              example:
                result:
                  to_ecosystem_book: false
                  bid: { }
                  ask: { }
                  pair: "AETH-AETH"
        '422':
          description: Wrong parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                value:
                  code: 422
                  error: "Wrong parameters"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              examples:
                Unauthorized:
                  value:
                    code: 401
                    error: "Auth header required"
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              examples:
                RateLimitExceeded:
                  value:
                    code: 429
                    error: "Rate limit exceeded. Suggested sleep time: 1000ms"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              examples:
                ServerError:
                  value:
                    code: 500
                    error: "Internal server error"

  /book/snapshot:
    get:
      summary: Get book snapshot
      description: |
        Retrieves the book snapshot for particular trading pair and specified depth.
        Client have 2 option to maintain book:
          - periodic poll
          - query snapshot, subscribe over websocket, apply updated incrementally. Msg_id is incremental 
        
        bids array already sorted from best bid to lowest bid
        asks array already sorted from best offer to highest ask
      security:
        - AuthToken: [ ]

      parameters:
        - in: query
          name: base
          required: true
          schema:
            type: string
            example: "ETH"
          description: Base symbol of trading pair
        - in: query
          name: quote
          required: true
          schema:
            type: string
            example: "USDC"
          description: Quote symbol of trading pair
        - in: query
          name: to_ecosystem_book
          required: true
          schema:
            type: integer
            example: 0 or 1
          description: Is book router or ecosystem
        - in: query
          name: levels
          required: false
          schema:
            type: integer
            example: 0 or 1
          description: How many levels of book should be retrieved, -1 refers to all
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotResponse'
              example:
                result:
                  to_ecosystem_book: false
                  levels:
                    bids:
                      [ [ "3170.6313", "0.4380538", 1 ], [ "3170.3141", "0.5518194", 1 ], [ "3169.7316", "0.9523885", 1 ], [ "3169.0528", "0.5152233", 1 ], [ "3168.7976", "0.585468", 1 ], [ "3168.411", "0.8911725", 1 ], [ "3168.3633", "0.6783952", 1 ] ]
                    asks:
                      [ [ "3170.6538", "0.7230962", 1 ], [ "3170.7946", "0.7023717", 1 ], [ "3172.329", "0.764084", 1 ], [ "3172.7461", "0.5906632", 1 ], [ "3172.9463", "0.3627099", 1 ], [ "3173.6037", "0.8015292", 1 ], [ "3173.8306", "0.956762", 1 ], [ "3174.0809", "0.7838471", 1 ], [ "3174.8152", "0.468063", 1 ] ]
                    msg_id: "250"
                  pair: "AETH-AUSDC"

        '404':
          description: No book for specified trading pair
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BBOResponse'
              example:
                result:
                  to_ecosystem_book: false
                  levels:
                    asks: [ ]
                    bids: [ ]
                    msg_id: "0"
                  pair: "AETH-AETH"
        '422':
          description: Wrong parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                value:
                  code: 422
                  error: "Wrong parameters"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              examples:
                Unauthorized:
                  value:
                    code: 401
                    error: "Auth header required"
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              examples:
                RateLimitExceeded:
                  value:
                    code: 429
                    error: "Rate limit exceeded. Suggested sleep time: 1000ms"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              examples:
                ServerError:
                  value:
                    code: 500
                    error: "Internal server error"


  /user/listen_key:
    get:
      summary: Obtain listen key for websocket
      description: |
        In order to use websockets user need to obtain listen key.
        Expiration for listen key is 30 minutes. 
        Subsequent invocation of get method will prolong listen key for another 30minutes
      security:
        - AuthToken: [ ]
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultListenToken'
              example:
                value:
                  result: "xjkfdjkdsfsdkf"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                value:
                  code: 401
                  error: "Auth header required"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                value:
                  code: 500
                  error: "Internal server error"

  /place_order:
    post:
      summary: Place an order
      description: |
        Schedules place of passive order. Successful response means exchange validated request and now
        put this request in processing queue. Actual result of place should be obtained over websocket stream.
        User first need to sign place request with signer that was bind for his trading account in exchange contract
        The following typed message should we be signed (example). 
        ```json
        {
          "domain": {
            "name": "LayerAkira Exchange",
            "version": "0.0.1",
            "chainId": "MAINNET|SEPOLIA"
          },
          "types": {
            "StarkNetDomain": [
              {
                "name": "name",
                "type": "felt"
              },
              {
                "name": "version",
                "type": "felt"
              },
              {
                "name": "chainId",
                "type": "felt"
              }
            ],
            "Order": [
              {
                "name": "maker",
                "type": "felt"
              },
              {
                "name": "price",
                "type": "u256"
              },
              {
                "name": "qty",
                "type": "Quantity"
              },
              {
                "name": "base",
                "type": "felt"
              },
              {
                "name": "quote",
                "type": "felt"
              },
              {
                "name": "fee",
                "type": "OrderFee"
              },
              {
                "name": "constraints",
                "type": "Constraints"
              },
              {
                "name": "salt",
                "type": "felt"
              },
              {
                "name": "flags",
                "type": "OrderFlags"
              },
              {
                "name": "exchange",
                "type": "felt"
              },
              {
                "name": "source",
                "type": "felt"
              }
            ],
            "u256": [
              {
                "name": "low",
                "type": "felt"
              },
              {
                "name": "high",
                "type": "felt"
              }
            ],
            "FixedFee": [
              {
                "name": "recipient",
                "type": "felt"
              },
              {
                "name": "maker_pbips",
                "type": "felt"
              },
              {
                "name": "taker_pbips",
                "type": "felt"
              },
              {
                "name": "apply_to_receipt_amount",
                "type": "bool"
              }
            ],
            "Constraints": [
              {
                "name": "number_of_swaps_allowed",
                "type": "felt"
              },
              {
                "name": "duration_valid",
                "type": "felt"
              },
              {
                "name": "created_at",
                "type": "felt"
              },
              {
                "name": "stp",
                "type": "felt"
              },
              {
                "name": "nonce",
                "type": "felt"
              },
              {
                "name": "min_receive_amount",
                "type": "u256"
              },
              {
                "name": "router_signer",
                "type": "felt"
              }
            ],
            "Quantity": [
              {
                "name": "base_qty",
                "type": "u256"
              },
              {
                "name": "quote_qty",
                "type": "u256"
              },
              {
                "name": "base_asset",
                "type": "u256"
              }
            ],
            "GasFee": [
              {
                "name": "gas_per_action",
                "type": "felt"
              },
              {
                "name": "fee_token",
                "type": "felt"
              },
              {
                "name": "max_gas_price",
                "type": "u256"
              },
              {
                "name": "r0",
                "type": "u256"
              },
              {
                "name": "r1",
                "type": "u256"
              }
            ],
            "OrderFee": [
              {
                "name": "trade_fee",
                "type": "FixedFee"
              },
              {
                "name": "router_fee",
                "type": "FixedFee"
              },
              {
                "name": "gas_fee",
                "type": "GasFee"
              }
            ],
            "OrderFlags": [
              {
                "name": "full_fill_only",
                "type": "bool"
              },
              {
                "name": "best_level_only",
                "type": "bool"
              },
              {
                "name": "post_only",
                "type": "bool"
              },
              {
                "name": "is_sell_side",
                "type": "bool"
              },
              {
                "name": "is_market_order",
                "type": "bool"
              },
              {
                "name": "to_ecosystem_book",
                "type": "bool"
              },
              {
                "name": "external_funds",
                "type": "bool"
              }
            ]
          },
          "primaryType": "Order",
          "message": {
            "maker": "0x1234567890ABCDEF",
            "price": {
              "low": "3000000000",
              "high": "0"
            },
            "qty": {
              "base_qty": {
                "low": "10000000000000000000000",
                "high": "0"
              },
              "quote_qty": {
                "low": "200000000",
                "high": "0"
              },
              "base_asset": {
                "low": "1000000000000000000",
                "high": "0"
              }
            },
            "base": "0x1",
            "quote": "0x2",
            "fee": {
              "gas_fee": {
                "r0": {
                  "low": "2000000000000000000",
                  "high": "0"
                },
                "r1": {
                  "low": "3000000000000000000",
                  "high": "0"
                },
                "fee_token": "0x3",
                "gas_per_action": "21000",
                "max_gas_price": {
                  "low": "C097CE7BC90715B34B9F1000000000",
                  "high": "0"
                }
              },
              "router_fee": {
                "recipient": "0x1111111111111111",
                "maker_pbips": "100",
                "taker_pbips": "150",
                "apply_to_receipt_amount": true
              },
              "trade_fee": {
                "recipient": "0x2222222222222222",
                "maker_pbips": "50",
                "taker_pbips": "75",
                "apply_to_receipt_amount": false
              }
            },
            "constraints": {
              "created_at": "1617171717",
              "duration_valid": "3600",
              "min_receive_amount": {
                "low": "1000000000000000000000000",
                "high": "0"
              },
              "nonce": "42",
              "number_of_swaps_allowed": "10",
              "router_signer": "0xABCDEF1234567890",
              "stp": "3"
            },
            "flags": {
              "best_level_only": true,
              "external_funds": false,
              "full_fill_only": true,
              "is_market_order": false,
              "is_sell_side": true,
              "post_only": true,
              "to_ecosystem_book": false
            },
            "exchange": "0x5",
            "salt": "42",
            "source": "LayerAkira"
          }
        }
        ```
      security:
        - AuthToken: [ ]

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaceOrder'
            examples:
              placeOrderExample:
                value:
                  constraints:
                    created_at: 1617171717
                    duration_valid: 3600
                    min_receive_amount: "1000000000000000000"
                    nonce: 42
                    number_of_swaps_allowed: 10
                    router_signer: "0xABCDEF1234567890"
                    stp: 3
                  fee:
                    gas_fee:
                      conversion_rate: [ "2", "3" ]
                      fee_token: "STRK"
                      gas_per_action: 21000
                      max_gas_price: "1000000000000000000"
                    router_fee:
                      apply_to_receipt_amount: true
                      maker_pbips: 100
                      recipient: "0x1111111111111111"
                      taker_pbips: 150
                    trade_fee:
                      apply_to_receipt_amount: false
                      maker_pbips: 50
                      recipient: "0x2222222222222222"
                      taker_pbips: 75
                  flags:
                    best_level_only: true
                    external_funds: false
                    full_fill_only: true
                    is_market_order: false
                    is_sell_side: true
                    post_only: true
                    to_ecosystem_book: false
                  maker: "0x1234567890ABCDEF"
                  price: "3000"
                  qty:
                    base_qty: "10000"
                    quote_qty: "200"
                  router_sign: [ "0", "0" ]
                  salt: "42"
                  sign: [ "1", "2" ]
                  source: "LayerAkira"
                  ticker: [ "ETH", "USDT" ]
      responses:
        '200':
          description: Successful response, hash of the order (of the typed message)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaceOrder'
              example:
                value:
                  result: "0x12345.."
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                value:
                  code: 401
                  error: "Auth header required"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                value:
                  code: 500
                  error: "Internal server error"
        '422':
          description: Processing error. For exact code semantic please refer documentation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                value:
                  code: xxx
                  error: "FAILED_SIGN_CHECK"
  /cancel_order:
    post:
      summary: Cancel a specific order
      description: |
        Schedules cancellation of passive order. Successful response means exchange validated request and now
        put this request in processing queue. Actual result of cancellation should be obtained over websocket stream.
        
        User first need to sign cancelRequest with signer that was bind for his trading account in exchange contract
        The following typed message should we be signed. 
        ```json
          {
            "domain": {
              "name": "LayerAkira Exchange",
              "version": "0.0.1",
              "chainId": "<MAINNET|SEPOLIA>"
            },
            "types": {
              "StarkNetDomain": [
                {
                  "name": "name",
                  "type": "felt"
                },
                {
                  "name": "version",
                  "type": "felt"
                },
                {
                  "name": "chainId",
                  "type": "felt"
                }
              ],
              "CancelOrder": [
                {
                  "name": "maker",
                  "type": "felt"
                },
                {
                  "name": "order_hash",
                  "type": "felt"
                },
                {
                  "name": "salt",
                  "type": "felt"
                }
              ]
            },
            "primaryType": "CancelOrder",
            "message": {
              "maker": "0x1",
              "order_hash": "0x1",
              "salt": "42"
            }
          }
        ```
      security:
        - AuthToken: [ ]

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelOrderRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultCancel'
              example:
                value:
                  result: "0x123456"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                value:
                  code: 401
                  error: "Auth header required"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                value:
                  code: 500
                  error: "Internal server error"
        '422':
          description: Processing error. For exact code semantic please refer documentation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                value:
                  code: xxx
                  error: "FAILED_SIGN_CHECK"
  /cancel_all:
    post:
      security:
        - AuthToken: [ ]
      summary: Cancel all orders
      description: |
        Schedules cancellation of all passive orders under specified trading pair.
        Successful response means exchange validated request and now put this request into processing queue.
        Actual result of cancellation should be obtained over websocket stream.

        User first need to sign cancelAllRequest with signer that was bind for his trading account in exchange contract
        The following typed message should we be signed (example). 
        ```json
        {
          "domain": {
            "name": "LayerAkira Exchange",
            "version": "0.0.1",
            "chainId": "MAINNET|SEPOLIA"
          },
          "types": {
            "StarkNetDomain": [
              {
                "name": "name",
                "type": "felt"
              },
              {
                "name": "version",
                "type": "felt"
              },
              {
                "name": "chainId",
                "type": "felt"
              }
            ],
            "Ticker": [
              {
                "name": "base",
                "type": "felt"
              },
              {
                "name": "quote",
                "type": "felt"
              },
              {
                "name": "to_ecosystem_book",
                "type": "bool"
              }
            ],
            "CancelAllOrders": [
              {
                "name": "maker",
                "type": "felt"
              },
              {
                "name": "salt",
                "type": "felt"
              },
              {
                "name": "ticker",
                "type": "Ticker"
              }
            ]
          },
          "primaryType": "CancelAllOrders",
          "message": {
            "maker": "1",
            "salt": "42",
            "ticker": {
              "base": "ETH",
              "quote": "USDT",
              "to_ecosystem_book": false
            }
          }
        }
        ```
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelAllOrdersRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultCancelAll'
              example:
                value:
                  result: "0x12345.."
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                value:
                  code: 401
                  error: "Auth header required"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                value:
                  code: 500
                  error: "Internal server error"
        '422':
          description: Processing error. For exact code semantic please refer documentation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                value:
                  code: xxx
                  error: "FAILED_SIGN_CHECK"

components:
  securitySchemes:
    AuthToken:
      type: apiKey
      in: header
      name: Authorization  # name of the header, query parameter or cookie
  schemas:
    PlaceOrder:
      type: object
      properties:
        constraints:
          $ref: '#/components/schemas/Constraints'
        fee:
          $ref: '#/components/schemas/OrderFee'
        flags:
          $ref: '#/components/schemas/OrderFlags'
        maker:
          type: string
          example: "0x1234567890ABCDEF"
        price:
          type: string
          example: "3000"
        qty:
          $ref: '#/components/schemas/Quantity'
        salt:
          type: string
          example: "42"
        sign:
          type: array
          items:
            type: string
          example: [ "1", "2" ]
        router_sign:
          type: array
          items:
            type: string
          example: [ "0", "0" ]
        source:
          type: string
          example: "LayerAkira"
        ticker:
          type: array
          items:
            type: string
          example: [ "ETH", "USDT" ]
    Constraints:
      type: object
      properties:
        created_at:
          type: integer
          example: 1617171717
        duration_valid:
          type: integer
          example: 3600
        min_receive_amount:
          type: string
          example: "1000000000000000000"
        nonce:
          type: integer
          example: 42
        number_of_swaps_allowed:
          type: integer
          example: 10
        router_signer:
          type: string
          example: "0xABCDEF1234567890"
        stp:
          type: integer
          example: 3
    GasFee:
      type: object
      properties:
        conversion_rate:
          type: array
          items:
            type: string
          example: [ "2", "3" ]
        fee_token:
          type: string
          example: "STRK"
        gas_per_action:
          type: integer
          example: 21000
        max_gas_price:
          type: string
          example: "1000000000000000000"
    FixedFee:
      type: object
      properties:
        recipient:
          type: string
          example: "0x1111111111111111"
        maker_pbips:
          type: integer
          example: 100
        taker_pbips:
          type: integer
          example: 150
        apply_to_receipt_amount:
          type: boolean
          example: true
    OrderFee:
      type: object
      properties:
        gas_fee:
          $ref: '#/components/schemas/GasFee'
        router_fee:
          $ref: '#/components/schemas/FixedFee'
        trade_fee:
          $ref: '#/components/schemas/FixedFee'
    OrderFlags:
      type: object
      properties:
        best_level_only:
          type: boolean
          example: true
        external_funds:
          type: boolean
          example: false
        full_fill_only:
          type: boolean
          example: true
        is_market_order:
          type: boolean
          example: false
        is_sell_side:
          type: boolean
          example: true
        post_only:
          type: boolean
          example: true
        to_ecosystem_book:
          type: boolean
          example: false
    Quantity:
      type: object
      properties:
        base_qty:
          type: string
          example: "10000"
        quote_qty:
          type: string
          example: "200"





    Result:
      type: object
      properties:
        result:
          oneOf:
            - type: string
            - type: object
            - type: array
              items:
                type: object
          required: false
        code:
          type: integer
          required: false
        error:
          type: string
          required: false
    ResultSignData:
      type: object
      properties:
        result:
          type: string
          required: true
          example: "sign data challenge"
    ResultAuth:
      type: object
      properties:
        result:
          type: string
          required: true
          example: "<jwt token>"
    ResultQueryGas:
      type: object
      properties:
        result:
          type: string
          required: true
          example: "stringified big integer value"

    ResultListenToken:
      type: object
      properties:
        result:
          type: string
          required: true
          example: "listen_token"
    TableLevel:
      type: object
      properties:
        price:
          type: string
          example: "3170.6313"
          description: price in quote asset
        volume:
          type: string
          example: "0.4380538"
          description: qty in base asset
        orders:
          type: integer
          example: 1
          description: amount of orders on that level
    SnapshotLevel:
      type: array
      example: [ "2800", "12.25", 1 ]
      description: array of 3 element represent level <price, new volume at that level, new order at that level >
    SnapshotResponse:
      type: object
      properties:
        result:
          type: object
          properties:
            to_ecosystem_book:
              type: boolean
              example: false
            levels:
              type: object
              properties:
                bids:
                  oneOf:
                    - $ref: '#/components/schemas/SnapshotLevel'
                    - type: array
                      description: Empty side
                      example: [ ]
                  required: true
                  example: [ [ "3170.6313", "0.4380538", 1 ], [ "3170.3141", "0.5518194", 1 ] ]
                asks:
                  oneOf:
                    - $ref: '#/components/schemas/SnapshotLevel'
                    - type: array
                      description: Empty side
                  example: [ [ "3170.6538", "0.7230962", 1 ], [ "3170.7946", "0.7023717", 1 ] ]
                  required: true
                msg_id:
                  required: true
                  type: string
                  description: Book id, can be used to correctly apply book snapshots over websockets
                  example: "2555777"
            pair:
              type: string
              example: "AETH-AUSDC"

    BBOResponse:
      type: object
      properties:
        result:
          type: object
          properties:
            to_ecosystem_book:
              type: boolean
              example: false
            bid:
              oneOf:
                - $ref: '#/components/schemas/TableLevel'
                - type: object
                  description: Empty side
                  example: { }
            ask:
              $ref: '#/components/schemas/TableLevel'
            pair:
              type: string
              example: "AETH-AUSDC"


    CancelOrderRequest:
      type: object
      properties:
        maker:
          type: string
          example: "0x123456789abcdef"
          required: true
        order_hash:
          type: string
          example: "0xabcdef123456789"
          required: true
        ticker:
          type: object
          required: true
          properties:
            base:
              type: string
              example: "ETH"
            quote:
              type: string
              example: "USDT"
            to_ecosystem_book:
              type: boolean
              example: false
        salt:
          type: string
          required: true
          example: "random_salt_value"
        sign:
          type: array
          required: true
          items:
            type: string
          example: [ "0x12345", "0x12345" ]

    ResultCancel:
      type: object
      properties:
        result:
          type: string
          required: true
          example: "0x..."
          description: order hash of cancel request



    ResultCancelAll:
      type: object
      properties:
        result:
          type: string
          required: true
          example: "0x..."
          description: order hash of cancel all request

    CancelAllOrdersRequest:
      type: object
      properties:
        maker:
          type: string
          example: "0x123456789abcdef"
          required: true
        order_hash:
          type: integer
          example: 0
          required: true
          description: should be always 0
        ticker:
          type: object
          required: true
          properties:
            base:
              type: string
              example: "ETH"
            quote:
              type: string
              example: "USDT"
            to_ecosystem_book:
              type: boolean
              example: true
        salt:
          type: string
          example: "random_salt_value"
          required: true
        sign:
          type: array
          required: true
          items:
            type: string
          example: [ "0x12345", "0x12345" ]

  examples:
    SignDataIssued:
      value:
        result: "Sign data issued successfully."
    InvalidInput:
      value:
        code: 400
        error: "Invalid user or account parameter"
    Unauthorized:
      value:
        code: 401
        error: "Unauthorized access"
    RateLimitExceeded:
      value:
        code: 429
        error: "Rate limit exceeded. Suggested sleep time: 1000ms"
    WrongUser:
      value:
        code: 500
        error: "Wrong user"
    WrongAccount:
      value:
        code: 500
        error: "Wrong account"
    ServerError:
      value:
        code: 500
        error: "Internal server error"
    JwtTokenIssued:
      value:
        result: "JWT token issued successfully."
#security:
#  - AuthToken: []